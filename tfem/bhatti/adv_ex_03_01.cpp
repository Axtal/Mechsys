/************************************************************************
 * MechSys - Open Library for Mechanical Systems                        *
 * Copyright (C) 2005 Dorival M. Pedroso, Ra√∫l D. D. Farfan             *
 *                                                                      *
 * This program is free software: you can redistribute it and/or modify *
 * it under the terms of the GNU General Public License as published by *
 * the Free Software Foundation, either version 3 of the License, or    *
 * any later version.                                                   *
 *                                                                      *
 * This program is distributed in the hope that it will be useful,      *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of       *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the         *
 * GNU General Public License for more details.                         *
 *                                                                      *
 * You should have received a copy of the GNU General Public License    *
 * along with this program. If not, see <http://www.gnu.org/licenses/>  *
 ************************************************************************/

/*  Bhatti (2005) (advanced): Example 3.1, p129  *
 *  ===========================================  */

// STL
#include <iostream>

// MechSys
#include <mechsys/mesh/mesh.h>
#include <mechsys/fem/elems/tri3.h>
#include <mechsys/fem/equilibelem.h>
#include <mechsys/fem/domain.h>
#include <mechsys/fem/solver.h>
#include <mechsys/models/linelastic.h>
#include <mechsys/util/maps.h>
#include <mechsys/util/fatal.h>

using std::cout;
using std::endl;
using FEM::PROB;
using FEM::GEOM;

int main(int argc, char **argv) try
{
    ///////////////////////////////////////////////////////////////////////////////////////// Mesh /////

    Mesh::Generic mesh(/*NDim*/2);
    mesh.SetSize   (6/*verts*/, 4/*cells*/);
    mesh.SetVert   (0, -100, 3.0, 0.0);
    mesh.SetVert   (1,    0, 3.0, 0.5);
    mesh.SetVert   (2, -100, 6.0, 0.0);
    mesh.SetVert   (3,    0, 6.0, 0.5);
    mesh.SetVert   (4, -100, 9.0, 0.0);
    mesh.SetVert   (5,    0, 9.0, 0.5);
    mesh.SetCell   (0,   -1, Array<int>(0,2,1));
    mesh.SetCell   (1,   -1, Array<int>(2,3,1));
    mesh.SetCell   (2,   -1, Array<int>(2,4,3));
    mesh.SetCell   (3,   -1, Array<int>(4,5,3));
    //mesh.WriteMPY  ("ex31");

    ////////////////////////////////////////////////////////////////////////////////////////// FEM /////

    // elements properties
    Dict prps;
    prps.Set(-1, "prob geom active  axs nip", PROB("Equilib"), GEOM("Tri3"), TRUE,  TRUE, 1.0);

    // models
    Dict mdls;
    mdls.Set(-1, "name E nu axs", MODEL("LinElastic"), 30000.0, 0.3, TRUE);

    // initial values
    Dict inis;
    inis.Set(-1, "sx sy sz sxy", 0.0,0.0,0.0,0.0);

    // domain
    FEM::Domain dom(mesh, prps, mdls, inis);

    // check matrices
    {
        double tol   = 1.0e-8;
        double error = 0.0;
        Mat_t K0c(6,6),K1c(6,6),K2c(6,6),K3c(6,6);
        K0c =
          9.4172260553520964e+05,  3.0811774102515273e+05, -7.9295006881473120e+04, -1.4499658401183662e+05, -8.7375545677966124e+05, -1.6312115701331614e+05,
          3.0811774102515273e+05,  3.0690943615838741e+06, -2.7186859502219356e+05, -2.4166097335306102e+04, -1.9937030301627534e+05, -3.0449282642485681e+06,
         -7.9295006881473120e+04, -2.7186859502219356e+05,  1.0799224746714911e+05,  0.0000000000000000e+00,  1.4348620292837993e+04,  2.7186859502219356e+05,
         -1.4499658401183662e+05, -2.4166097335306102e+04,  0.0000000000000000e+00,  2.4166097335306102e+04,  1.4499658401183662e+05,  0.0000000000000000e+00,
         -8.7375545677966124e+05, -1.9937030301627531e+05,  1.4348620292837993e+04,  1.4499658401183662e+05,  8.7526583786311792e+05,  5.4373719004438717e+04,
         -1.6312115701331611e+05, -3.0449282642485681e+06,  2.7186859502219356e+05,  0.0000000000000000e+00,  5.4373719004438710e+04,  3.0449282642485681e+06;
        K1c =
          1.0917034471224530e+06, -5.4373719004438710e+04, -1.0741830265543561e+06, -1.2687201101035703e+05, -4.8332194670612189e+03,  1.8124573001479573e+05,
         -5.4373719004438717e+04,  3.8061603303107098e+06, -3.2624231402663229e+05, -3.8061603303107098e+06,  2.1749487601775484e+05,  0.0000000000000000e+00,
         -1.0741830265543561e+06, -3.2624231402663229e+05,  1.2155546959658968e+06,  5.0748804404142802e+05, -1.0149760880828560e+05, -1.8124573001479573e+05,
         -1.2687201101035705e+05, -3.8061603303107098e+06,  5.0748804404142802e+05,  3.8363679519798425e+06, -2.1749487601775484e+05, -3.0207621669132626e+04,
         -4.8332194670612189e+03,  2.1749487601775484e+05, -1.0149760880828559e+05, -2.1749487601775484e+05,  9.1831169874163141e+04,  0.0000000000000000e+00,
          1.8124573001479576e+05,  0.0000000000000000e+00, -1.8124573001479576e+05, -3.0207621669132626e+04,  0.0000000000000000e+00,  3.0207621669132626e+04;
        K2c =
          1.6553776674684680e+06,  5.7998633604734635e+05, -1.4499658401183656e+05, -2.5374402202071407e+05, -1.5285056564581110e+06, -3.2624231402663229e+05,
          5.7998633604734647e+05,  5.3709151327717798e+06, -4.3498975203550979e+05, -4.2290670336785675e+04, -3.0811774102515279e+05, -5.3286244624349941e+06,
         -1.4499658401183656e+05, -4.3498975203550974e+05,  1.6916268134714267e+05,  0.0000000000000000e+00,  1.2083048667653047e+04,  4.3498975203550974e+05,
         -2.5374402202071407e+05, -4.2290670336785675e+04,  0.0000000000000000e+00,  4.2290670336785675e+04,  2.5374402202071407e+05,  0.0000000000000000e+00,
         -1.5285056564581110e+06, -3.0811774102515279e+05,  1.2083048667653047e+04,  2.5374402202071407e+05,  1.5254848942911979e+06,  5.4373719004438717e+04,
         -3.2624231402663235e+05, -5.3286244624349941e+06,  4.3498975203550979e+05,  0.0000000000000000e+00,  5.4373719004438724e+04,  5.3286244624349941e+06;
        K3c =
          1.7426021750380886e+06, -5.4373719004438717e+04, -1.7282535547452506e+06, -2.3561944901923451e+05, -6.4191196046906807e+03,  2.8999316802367324e+05,
         -5.4373719004438710e+04,  6.0898565284971362e+06, -4.8936347103994840e+05, -6.0898565284971362e+06,  3.8061603303107095e+05,  0.0000000000000000e+00,
         -1.7282535547452506e+06, -4.8936347103994846e+05,  1.9298894293867107e+06,  7.7935663906362164e+05, -1.6651951445109356e+05, -2.8999316802367324e+05,
         -2.3561944901923451e+05, -6.0898565284971362e+06,  7.7935663906362164e+05,  6.1381887231677482e+06, -3.8061603303107095e+05, -4.8332194670612203e+04,
         -6.4191196046906816e+03,  3.8061603303107101e+05, -1.6651951445109354e+05, -3.8061603303107101e+05,  1.5368127524171220e+05,  0.0000000000000000e+00,
          2.8999316802367324e+05,  0.0000000000000000e+00, -2.8999316802367324e+05, -4.8332194670612203e+04,  0.0000000000000000e+00,  4.8332194670612203e+04;
        Mat_t K0,K1,K2,K3;
        dom.Eles[0]->CalcK(K0);
        dom.Eles[1]->CalcK(K1);
        dom.Eles[2]->CalcK(K2);
        dom.Eles[3]->CalcK(K3);
        K0c /= 2.0*Util::PI;
        K1c /= 2.0*Util::PI;
        K2c /= 2.0*Util::PI;
        K3c /= 2.0*Util::PI;
        error += CompareMatrices (K0,K0c);
        error += CompareMatrices (K1,K1c);
        error += CompareMatrices (K2,K2c);
        error += CompareMatrices (K3,K3c);
        cout << "\n[1;37m--- Matrices: Error ----------------------------------------------------------[0m\n";
        cout << "error (K) = " << (error>tol ? "[1;31m" : "[1;32m") << error << "[0m" << endl;
    }

    // solver
    FEM::Solver sol(dom);

    // stage # 1 -----------------------------------------------------------
    double cbx = (0.283/386.4)*pow(5000.0*2.0*Util::PI/60.0,2.0)/1000.0;
    Dict bcs;
    bcs.Set(-100, "uy", 0.0);
    bcs.Set(  -1, "cbx", cbx); // centrifugal body force along x (will be multiplied by the radius at IP)
    dom.SetBCs (bcs);
    sol.Solve ();

    //////////////////////////////////////////////////////////////////////////////////////// Output ////

    dom.PrintResults ("%11.6g");

    //////////////////////////////////////////////////////////////////////////////////////// Check /////

    Table nod_sol;
    nod_sol.Set("                   ux                        uy", /*NRows*/6,
                 1.404124365592479e-03,    0.000000000000000e+00,
                 1.400950373660023e-03,   -6.649890201682083e-05,
                 1.311665754585907e-03,    0.000000000000000e+00,
                 1.314766838679747e-03,   -4.376384021358650e-05,
                 1.284691261592797e-03,    0.000000000000000e+00,
                 1.280765280310610e-03,   -3.212161598704163e-05);

    Table ele_sol;
    ele_sol.Set("sx  sy  sz  sxy   ex  ey  ez  exy", /*NRows*/4,
                2.391086263519284e+00,    3.312625510118462e-02,    1.101911499018216e+01,   -7.324596767207825e-02,    -3.081953700219068e-05,   -1.329978040336417e-04,    3.430617078198674e-04,   -3.173991932456724e-06,
                1.971915214324848e+00,    6.149959350845141e-01,    8.830839278674162e+00,    1.590060244856680e-01,    -2.872784499342515e-05,   -8.752768042717300e-05,    2.684921977950452e-04,    6.890261061045614e-06,
                1.345433390384905e+00,   -4.669400579874703e-01,    5.850867792374159e+00,    7.156347908861292e-02,    -8.991497664370082e-06,   -8.752768042717300e-05,    1.862439930884977e-04,    3.101084093839893e-06,
                1.228622637246108e+00,    7.636963760623686e-03,    5.221157106030961e+00,   -4.582178256375108e-02,    -1.133385278971225e-05,   -6.424323197408325e-05,    1.616759741909648e-04,   -1.985610577762547e-06);

    // error tolerance
    SDPair nod_tol, ele_tol;
    nod_tol.Set("ux uy", 1.0e-15, 1.0e-15);
    ele_tol.Set("sx sy sz sxy  ex ey ez exy", 1.0e-13,1.0e-13,1.0e-13,1.0e-13, 1.0e-15,1.0e-15,1.0e-15,1.0e-15);

    // return error flag
    return dom.CheckError (nod_sol, ele_sol, nod_tol, ele_tol);
}
MECHSYS_CATCH
