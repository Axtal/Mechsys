/************************************************************************
 * MechSys - Open Library for Mechanical Systems                        *
 * Copyright (C) 2005 Dorival M. Pedroso, Ra√∫l D. D. Farfan             *
 *                                                                      *
 * This program is free software: you can redistribute it and/or modify *
 * it under the terms of the GNU General Public License as published by *
 * the Free Software Foundation, either version 3 of the License, or    *
 * any later version.                                                   *
 *                                                                      *
 * This program is distributed in the hope that it will be useful,      *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of       *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the         *
 * GNU General Public License for more details.                         *
 *                                                                      *
 * You should have received a copy of the GNU General Public License    *
 * along with this program. If not, see <http://www.gnu.org/licenses/>  *
 ************************************************************************/

/*  Smith & Griffiths (2004): Figure 5.24 p193 
 *  ==========================================  */

// STL
#include <iostream>

// MechSys
#include <mechsys/mesh/mesh.h>
#include <mechsys/mesh/structured.h>
#include <mechsys/fem/elems/hex20.h>
#include <mechsys/fem/equilibelem.h>
#include <mechsys/fem/domain.h>
#include <mechsys/fem/solvers/stdsolver.h>
#include <mechsys/models/linelastic.h>
#include <mechsys/util/maps.h>
#include <mechsys/util/util.h>
#include <mechsys/util/fatal.h>
#include <mechsys/draw.h>

using std::cout;
using std::endl;
using FEM::PROB;
using FEM::GEOM;

int main(int argc, char **argv) try
{
    ///////////////////////////////////////////////////////////////////////////////////////// Mesh /////
    
    Mesh::Generic mesh(/*NDim*/3);
    mesh.SetSize    (70/*verts*/, 6/*cells*/);

    mesh.SetVert    ( 0,-100,  0.0 ,  0.0,  0.0);
    mesh.SetVert    ( 1,-200,  0.25,  0.0,  0.0);
    mesh.SetVert    ( 2,-100,  0.5 ,  0.0,  0.0);
    mesh.SetVert    ( 3,   0,  0.0 ,  0.0, -0.5);
    mesh.SetVert    ( 4,   0,  0.5 ,  0.0, -0.5);
    mesh.SetVert    ( 5,   0,  0.0 ,  0.0, -1.0);
    mesh.SetVert    ( 6,   0,  0.25,  0.0, -1.0);
    mesh.SetVert    ( 7,   0,  0.5 ,  0.0, -1.0);
    mesh.SetVert    ( 8,   0,  0.0 ,  0.0, -1.5);
    mesh.SetVert    ( 9,   0,  0.5 ,  0.0, -1.5);
    mesh.SetVert    (10,   0,  0.0 ,  0.0, -2.0);
    mesh.SetVert    (11,   0,  0.25,  0.0, -2.0);
    mesh.SetVert    (12,   0,  0.5 ,  0.0, -2.0);

    mesh.SetVert    (13,-200,  0.0 ,  0.5,  0.0);
    mesh.SetVert    (14,-200,  0.5 ,  0.5,  0.0);
    mesh.SetVert    (15,   0,  0.0 ,  0.5, -1.0);
    mesh.SetVert    (16,   0,  0.5 ,  0.5, -1.0);
    mesh.SetVert    (17,   0,  0.0 ,  0.5, -2.0);
    mesh.SetVert    (18,   0,  0.5 ,  0.5, -2.0);

    mesh.SetVert    (19,-100,  0.0 ,  1.0,  0.0);
    mesh.SetVert    (20,-200,  0.25,  1.0,  0.0);
    mesh.SetVert    (21,-100,  0.5 ,  1.0,  0.0);
    mesh.SetVert    (22,   0,  0.0 ,  1.0, -0.5);
    mesh.SetVert    (23,   0,  0.5 ,  1.0, -0.5);
    mesh.SetVert    (24,   0,  0.0 ,  1.0, -1.0);
    mesh.SetVert    (25,   0,  0.25,  1.0, -1.0);
    mesh.SetVert    (26,   0,  0.5 ,  1.0, -1.0);
    mesh.SetVert    (27,   0,  0.0 ,  1.0, -1.5);
    mesh.SetVert    (28,   0,  0.5 ,  1.0, -1.5);
    mesh.SetVert    (29,   0,  0.0 ,  1.0, -2.0);
    mesh.SetVert    (30,   0,  0.25,  1.0, -2.0);
    mesh.SetVert    (31,   0,  0.5 ,  1.0, -2.0);

    mesh.SetVert    (32,   0,  0.0 ,  1.5,  0.0);
    mesh.SetVert    (33,   0,  0.5 ,  1.5,  0.0);
    mesh.SetVert    (34,   0,  0.0 ,  1.5, -1.0);
    mesh.SetVert    (35,   0,  0.5 ,  1.5, -1.0);
    mesh.SetVert    (36,   0,  0.0 ,  1.5, -2.0);
    mesh.SetVert    (37,   0,  0.5 ,  1.5, -2.0);

    mesh.SetVert    (38,   0,  0.0 ,  2.0,  0.0);
    mesh.SetVert    (39,   0,  0.25,  2.0,  0.0);
    mesh.SetVert    (40,   0,  0.5 ,  2.0,  0.0);
    mesh.SetVert    (41,   0,  0.0 ,  2.0, -0.5);
    mesh.SetVert    (42,   0,  0.5 ,  2.0, -0.5);
    mesh.SetVert    (43,   0,  0.0 ,  2.0, -1.0);
    mesh.SetVert    (44,   0,  0.25,  2.0, -1.0);
    mesh.SetVert    (45,   0,  0.5 ,  2.0, -1.0);
    mesh.SetVert    (46,   0,  0.0 ,  2.0, -1.5);
    mesh.SetVert    (47,   0,  0.5 ,  2.0, -1.5);
    mesh.SetVert    (48,   0,  0.0 ,  2.0, -2.0);
    mesh.SetVert    (49,   0,  0.25,  2.0, -2.0);
    mesh.SetVert    (50,   0,  0.5 ,  2.0, -2.0);

    mesh.SetVert    (51,   0,  0.0 ,  2.5,  0.0);
    mesh.SetVert    (52,   0,  0.5 ,  2.5,  0.0);
    mesh.SetVert    (53,   0,  0.0 ,  2.5, -1.0);
    mesh.SetVert    (54,   0,  0.5 ,  2.5, -1.0);
    mesh.SetVert    (55,   0,  0.0 ,  2.5, -2.0);
    mesh.SetVert    (56,   0,  0.5 ,  2.5, -2.0);

    mesh.SetVert    (57,   0,  0.0 ,  3.0,  0.0);
    mesh.SetVert    (58,   0,  0.25,  3.0,  0.0);
    mesh.SetVert    (59,   0,  0.5 ,  3.0,  0.0);
    mesh.SetVert    (60,   0,  0.0 ,  3.0, -0.5);
    mesh.SetVert    (61,   0,  0.5 ,  3.0, -0.5);
    mesh.SetVert    (62,   0,  0.0 ,  3.0, -1.0);
    mesh.SetVert    (63,   0,  0.25,  3.0, -1.0);
    mesh.SetVert    (64,   0,  0.5 ,  3.0, -1.0);
    mesh.SetVert    (65,   0,  0.0 ,  3.0, -1.5);
    mesh.SetVert    (66,   0,  0.5 ,  3.0, -1.5);
    mesh.SetVert    (67,   0,  0.0 ,  3.0, -2.0);
    mesh.SetVert    (68,   0,  0.25,  3.0, -2.0);
    mesh.SetVert    (69,   0,  0.5 ,  3.0, -2.0);

    mesh.SetCell    ( 0, -1, Array<int>( 5, 7,26,24, 0, 2,21,19, 6,16,25,15, 1,14,20,13, 3, 4,23,22));
    mesh.SetCell    ( 1, -2, Array<int>(10,12,31,29, 5, 7,26,24,11,18,30,17, 6,16,25,15, 8, 9,28,27));
    mesh.SetCell    ( 2, -1, Array<int>(24,26,45,43,19,21,40,38,25,35,44,34,20,33,39,32,22,23,42,41));
    mesh.SetCell    ( 3, -2, Array<int>(29,31,50,48,24,26,45,43,30,37,49,36,25,35,44,34,27,28,47,46));
    mesh.SetCell    ( 4, -1, Array<int>(43,45,64,62,38,40,59,57,44,54,63,53,39,52,58,51,41,42,61,60));
    mesh.SetCell    ( 5, -2, Array<int>(48,50,69,67,43,45,64,62,49,56,68,55,44,54,63,53,46,47,66,65));

    mesh.SetBryTag  (0, 0, -10);
    mesh.SetBryTag  (0, 2, -20);
    mesh.SetBryTag  (0, 5, -40);
    mesh.SetBryTag  (1, 0, -10);
    mesh.SetBryTag  (1, 2, -20);
    mesh.SetBryTag  (1, 4, -30);

    mesh.SetBryTag  (2, 0, -10);
    mesh.SetBryTag  (3, 0, -10);
    mesh.SetBryTag  (3, 4, -30);

    mesh.SetBryTag  (4, 0, -10);
    mesh.SetBryTag  (5, 0, -10);
    mesh.SetBryTag  (5, 4, -30);

    //mesh.WriteVTU   ("fig_05_24");
    //cout << mesh << endl;
    
    ////////////////////////////////////////////////////////////////////////////////////////// FEM /////

    // elements properties
    Dict prps;
    prps.Set(-1, "prob geom active nip", PROB("Equilib"), GEOM("Hex20"), 1.0, 8.0);
    prps.Set(-2, "prob geom active nip", PROB("Equilib"), GEOM("Hex20"), 1.0, 8.0);

    // models
    Dict mdls;
    mdls.Set(-1, "name E nu rho", MODEL("LinElastic"),  100.0, 0.3,  1.0, 1.0);
    mdls.Set(-2, "name E nu rho", MODEL("LinElastic"),   50.0, 0.3,  1.0, 1.0);

    // initial values
    Dict inis;
    inis.Set(-1, "sx sy sz sxy", 0.0,0.0,0.0,0.0);
    inis.Set(-2, "sx sy sz sxy", 0.0,0.0,0.0,0.0);

    // domain
    FEM::Domain dom(mesh, prps, mdls, inis);

    // solver
    SDPair flags;
    flags.Set ("fe", 1.);
    FEM::STDSolver sol(dom, flags);

    // stage # 1 -----------------------------------------------------------
    Dict bcs;
    //bcs.Set(-100, "fz",  0.04166666666666667);
    //bcs.Set(-200, "fz", -0.16666666666666667);
    //bcs.Set( -40, "qz", -1.0);
    bcs.Set( -40, "qn", -1.0);
    bcs.Set( -10, "ux",       0.0);
    bcs.Set( -20, "uy",       0.0);
    bcs.Set( -30, "ux uy uz", 0.0,0.0,0.0);
    dom.SetBCs (bcs);
    //cout << dom << endl;
    dom.PrintBCs(std::cout);
    sol.Solve ();

    //////////////////////////////////////////////////////////////////////////////////////// Output ////

    //dom.PrintResults ("%11.6g");
    dom.WriteVTU   ("fig_05_24");

    //////////////////////////////////////////////////////////////////////////////////////// Check /////
    
    Table nod_sol;
    nod_sol.Set("ux uy uz", dom.Nods.Size(),
         0.000000000000000E+00,  0.000000000000000E+00, -2.246500765490787E-02,
         1.583910496060340E-03,  0.000000000000000E+00, -2.255483694735321E-02,
         3.220902825001161E-03,  0.000000000000000E+00, -2.333291718903119E-02,
         0.000000000000000E+00,  0.000000000000000E+00, -1.849079487110627E-02,
         1.543386163277156E-03,  0.000000000000000E+00, -1.883809062820367E-02,
         0.000000000000000E+00,  0.000000000000000E+00, -1.442590460790187E-02,
         7.581882957110439E-04,  0.000000000000000E+00, -1.435240682209192E-02,
         1.510921099665469E-03,  0.000000000000000E+00, -1.410677796630181E-02,
         0.000000000000000E+00,  0.000000000000000E+00, -6.163334370573628E-03,
         2.791745144538955E-03,  0.000000000000000E+00, -6.429270136326062E-03,
         0.000000000000000E+00,  0.000000000000000E+00,  0.000000000000000E+00,
         0.000000000000000E+00,  0.000000000000000E+00,  0.000000000000000E+00,
         0.000000000000000E+00,  0.000000000000000E+00,  0.000000000000000E+00,
         0.000000000000000E+00, -2.636509763565923E-03, -2.091416880201127E-02,
         2.682119090872207E-03, -2.351562947333217E-03, -2.156639392479440E-02,
         0.000000000000000E+00,  1.920880391984773E-03, -1.258001206489784E-02,
         1.401676522438176E-03,  2.013303092837565E-03, -1.228963313721055E-02,
         0.000000000000000E+00,  0.000000000000000E+00,  0.000000000000000E+00,
         0.000000000000000E+00,  0.000000000000000E+00,  0.000000000000000E+00,
         0.000000000000000E+00, -4.404752518931236E-03, -1.366052652969094E-02,
         6.193924163718364E-04, -4.364483725499084E-03, -1.368326010742839E-02,
         1.280618203466245E-03, -3.937055049747129E-03, -1.386617424541054E-02,
         0.000000000000000E+00,  1.078066353252381E-03, -1.150393864686515E-02,
         8.753319133480854E-04,  1.490100951484467E-03, -1.152039549038886E-02,
         0.000000000000000E+00,  2.958188258300922E-03, -9.171834498547103E-03,
         5.428277078585079E-04,  2.965646563796275E-03, -9.093320479840279E-03,
         1.086820865799913E-03,  3.083787195165820E-03, -8.864006435062395E-03,
         0.000000000000000E+00,  2.375610447570931E-03, -4.184108581169291E-03,
         2.000018481259384E-03,  2.632220513610760E-03, -4.380144787490711E-03,
         0.000000000000000E+00,  0.000000000000000E+00,  0.000000000000000E+00,
         0.000000000000000E+00,  0.000000000000000E+00,  0.000000000000000E+00,
         0.000000000000000E+00,  0.000000000000000E+00,  0.000000000000000E+00,
         0.000000000000000E+00, -3.579943057052639E-03, -5.979630028745818E-03,
        -7.413880481683365E-05, -3.321081990493434E-03, -5.813221407057556E-03,
         0.000000000000000E+00,  3.150650899126640E-03, -5.383111622858573E-03,
         7.612343087324263E-04,  3.312533658885393E-03, -5.104128342632701E-03,
         0.000000000000000E+00,  0.000000000000000E+00,  0.000000000000000E+00,
         0.000000000000000E+00,  0.000000000000000E+00,  0.000000000000000E+00,
         0.000000000000000E+00, -2.121036375171861E-03, -2.575781050442681E-03,
        -1.816710580698765E-04, -2.066534854927771E-03, -2.541288267716592E-03,
        -3.531265160052207E-04, -2.120391079723742E-03, -2.337896199085389E-03,
         0.000000000000000E+00,  2.687562242570146E-04, -2.403920299163627E-03,
         1.000591537317435E-04,  3.146936362030586E-04, -2.218104306007612E-03,
         0.000000000000000E+00,  2.651350794443137E-03, -2.133190207373987E-03,
         2.082095312685143E-04,  2.668801007310832E-03, -2.080388279569574E-03,
         4.197803511336846E-04,  2.802391949145345E-03, -1.956602157583608E-03,
         0.000000000000000E+00,  2.293393267994337E-03, -1.130507608629370E-03,
         6.752160199631226E-04,  2.510883798667245E-03, -1.197916353113878E-03,
         0.000000000000000E+00,  0.000000000000000E+00,  0.000000000000000E+00,
         0.000000000000000E+00,  0.000000000000000E+00,  0.000000000000000E+00,
         0.000000000000000E+00,  0.000000000000000E+00,  0.000000000000000E+00,
         0.000000000000000E+00, -1.712317073186578E-03, -5.376714266281263E-04,
        -9.197039851119624E-05, -1.719430163328354E-03, -4.759289615407881E-04,
         0.000000000000000E+00,  2.044745359103121E-03, -3.707360108117185E-04,
         8.501653790242899E-05,  2.179757376749243E-03, -2.927030027983088E-04,
         0.000000000000000E+00,  0.000000000000000E+00,  0.000000000000000E+00,
         0.000000000000000E+00,  0.000000000000000E+00,  0.000000000000000E+00,
         0.000000000000000E+00, -1.707792121066834E-03,  1.459352529725203E-03,
        -3.548935758540396E-05, -1.701913033053894E-03,  1.490819285141552E-03,
        -7.238646797034549E-05, -1.669990382071488E-03,  1.451817030069681E-03,
         0.000000000000000E+00,  3.922224626300735E-04,  1.136636538839139E-03,
        -1.456332291842613E-04,  4.848030580407152E-04,  1.138391813297438E-03,
         0.000000000000000E+00,  1.668010029322225E-03,  5.260512769955115E-04,
        -9.977657940250570E-05,  1.700278490655642E-03,  5.388549291586811E-04,
        -2.111247101690338E-04,  1.825808063312428E-03,  5.433062553032318E-04,
         0.000000000000000E+00,  1.572078211332934E-03, -1.028507508147740E-04,
        -7.448485051380094E-05,  1.715786457536998E-03, -5.847263101786664E-05,
         0.000000000000000E+00,  0.000000000000000E+00,  0.000000000000000E+00,
         0.000000000000000E+00,  0.000000000000000E+00,  0.000000000000000E+00,
         0.000000000000000E+00,  0.000000000000000E+00,  0.000000000000000E+00);

    /*
    for (size_t i=0; i<dom.Eles.Size(); ++i)
    {
        for (size_t j=0; j<8; ++j)
        {
            Vec_t X;
            SDPair res;
            dom.Eles[i]->GetState (res, j);
            dom.Eles[i]->CoordsOfIP (j, X);
            cout << Util::_4<<i << Util::_8s<<X(0) << Util::_8s<<X(1) << Util::_8s<<X(2) << Util::_8s<<res("sx") << Util::_8s<<res("sy") << Util::_8s<<res("sz") << Util::_8s<<res("sxy") << Util::_8s<<res("syz") << Util::_8s<<res("szx") << endl;
        }
        cout << endl;
    }
    */

    Table ele_sol;
    ele_sol.Set("sx sy sz sxy syz szx", dom.Eles.Size()*8/*nip*/,
         3.903850209320392E-02,  7.933996071538607E-02, -8.459973163159187E-01,  2.976104968620638E-03,  7.260536345521756E-02, -4.293999376312306E-04,
         1.312423391117978E-02,  6.646409727232583E-02, -9.310740207934608E-01,  9.236155672856889E-03,  7.658294021970229E-02,  5.187306102418433E-04,
         1.948289149173305E-02,  1.998371085016548E-03, -6.779435518215760E-01,  4.296707034992572E-05,  2.203782893707410E-01, -7.218868507193321E-04,
         2.525211613405243E-03, -9.511901432541825E-03, -7.370591815587755E-01,  5.982153840740956E-03,  2.365287238741443E-01,  5.730502013660474E-03,
        -1.517638242923891E-02, -5.293945617952085E-01, -1.012795002490869E+00,  4.043354539548759E-04, -2.516874105558401E-02,  1.540761105138739E-02,
        -2.858430570293446E-03, -5.052278293772581E-01, -1.056150009918181E+00,  2.946294370375613E-03, -1.779091560100590E-02,  1.323743045086347E-02,
        -2.853751586639142E-02, -3.451017816497701E-01, -7.533827302637127E-01, -9.064120108404692E-03,  1.496854627996829E-01,  4.975798943304121E-03,
        -1.334977135449633E-02, -3.260832672247596E-01, -7.753816579899129E-01, -9.926626970644234E-03,  1.678719250655128E-01,  1.039797090164337E-02,

        -8.729177781641440E-02, -1.533216090059712E-01, -6.682127656236587E-01, -5.329000853535401E-04,  3.241626010102670E-02,  1.441718355269948E-02,
        -9.545627051700906E-02, -1.575542580123471E-01, -6.905352199617310E-01, -4.822594751525988E-03,  3.438793957916170E-02,  8.317643443448983E-02,
        -7.375301350915914E-02, -1.353880449384582E-01, -5.490857130410556E-01,  1.918094402974837E-03,  1.039376263457602E-01,  1.143755617175958E-02,
        -8.057894058757381E-02, -1.390676969318411E-01, -5.681211316372135E-01, -2.286237119685639E-03,  1.098338926770590E-01,  6.866560207833042E-02,
        -1.488574569585505E-02, -5.885375579098751E-02, -8.089475230764607E-01, -5.672312272877484E-04,  5.305271390137711E-02, -1.911214963724377E-02,
         9.589775832105962E-03, -2.754303148128978E-02, -7.562104628870369E-01, -4.854113086529233E-03,  5.250966240077681E-02, -3.989956542260807E-02,
        -6.581919413795934E-03, -8.103821568216318E-02, -6.191805178173360E-01,  7.413677678192026E-04,  1.168074609823491E-01, -1.563878061655109E-02,
         1.524742329144668E-02, -5.530545509379908E-02, -5.720068866284357E-01, -3.226956303959110E-03,  1.151345993862641E-01, -3.142609790684557E-02,

         1.403980374980798E-02, -1.315833150335612E-01, -2.944365623704146E-01, -6.306358211658613E-04,  2.132930206509931E-01, -1.290515787408572E-04,
         4.600516577468461E-04, -1.536118412435388E-01, -3.310892613940015E-01,  6.337794188681538E-03,  2.265197186849412E-01, -4.829608662261406E-03,
         1.584693106221596E-04, -1.656929220973548E-01, -6.967902692984186E-02,  7.569107764863077E-04,  5.814052640231570E-02,  2.434838881332865E-04,
        -5.757931738802083E-03, -1.839249867832010E-01, -8.018386998541291E-02,  8.443392545295953E-03,  5.451924514509490E-02, -5.068036176848776E-03,
         1.171957550857919E-02, -4.733634520939203E-02, -2.274236917384725E-01, -8.976767086426108E-03,  1.442006546678143E-01,  5.939661880028172E-03,
         9.644661666515869E-03, -7.729772021506764E-02, -2.475916398808451E-01, -1.306399888842831E-02,  1.594717552663719E-01,  1.705268700995858E-03,
         9.143733345578024E-03,  1.133686778008197E-01,  4.635079853887780E-02,  6.445736536867508E-03, -1.758344456835317E-02,  8.130377330559782E-04,
         3.526976027685133E-03,  7.986966453022279E-02,  3.966726729791894E-02,  5.731890242167766E-03, -1.727861036364390E-02, -2.032308004967369E-03,

        -5.687796463560146E-02, -1.305985623546966E-01, -4.030014886971104E-01,  1.585444341222744E-03,  1.279118034662295E-01,  8.857873338180011E-03,
        -6.387315232714685E-02, -1.380476200840461E-01, -4.191348059747971E-01, -5.174833722228734E-03,  1.355581638648010E-01,  5.390993021004663E-02,
        -2.824416791919322E-02, -7.950271015318734E-02, -2.042384693454361E-01,  8.763468142862556E-04,  1.208866208290464E-01,  4.605547879551608E-03,
        -3.248760412660605E-02, -8.475831592918502E-02, -2.135989707039788E-01, -5.910756448361736E-03,  1.275300916765435E-01,  2.984193097405373E-02,
        -6.381785892284941E-03, -1.110024892687294E-01, -4.369633441382873E-01,  4.448727815735026E-04,  1.287553727793847E-01, -1.122142131026590E-02,
         1.144496353669844E-02, -9.277291082999255E-02, -3.967597004879890E-01, -4.738699346064223E-03,  1.267276670178009E-01, -2.325611915011998E-02,
        -2.115317826711080E-03, -1.030910790840340E-01, -2.018429621530007E-01, -1.048273817493540E-04,  1.044266860130826E-01, -5.232014902314914E-03,
         9.017446849401103E-03, -9.363909242853347E-02, -1.759447136538436E-01, -5.388513007535099E-03,  1.018421426035530E-01, -1.009599241676505E-02,

        -3.349785861241898E-03, -7.567742398727273E-02, -7.092545025288259E-02, -2.813809217357108E-03, -6.562454381187502E-03,  3.509105084952998E-04,
        -3.529051388742006E-03, -7.732128276623353E-02, -7.265331694935315E-02, -4.700254376354242E-04, -1.614207443344674E-02,  4.234824890442981E-03,
        -1.125228742318782E-04, -1.219272912557440E-02,  5.685645912758866E-02, -2.415154923918448E-03, -1.578498915645700E-02,  2.300173956649643E-03,
        -3.032256115978703E-03, -9.375972778584783E-03,  5.418502499793345E-02, -6.490282057161436E-05, -2.155796537107052E-02,  4.175563639157916E-03,
        -7.849894723134770E-03,  5.618860835295467E-02, -2.704392130093446E-02,  6.167049810310644E-03, -1.179516801266462E-02, -3.989537702164216E-03,
        -2.340716162871778E-03,  5.905288139614412E-02, -2.103286234439879E-02,  4.730074527019015E-03, -2.096903262227675E-02,  1.154461535485103E-03,
        -2.034784459476913E-03,  1.096423390760759E-02,  1.630126567860477E-02, -3.480591239045485E-04, -2.041675955299313E-02,  2.020963107120225E-03,
         4.083913030112482E-04,  1.839226334133602E-02,  1.848211016580832E-02, -7.610480117250268E-04, -2.520028338065461E-02, -1.387300107593703E-04,

        -1.790244650856567E-02, -5.796236516192129E-02, -1.039801382691777E-01,  1.575200867293109E-03,  9.882307064155946E-02,  2.211877793775138E-03,
        -2.114159436194959E-02, -6.253012364179981E-02, -1.102429877433215E-01, -1.134748275872199E-03,  1.045353467759849E-01,  1.584553737306217E-02,
        -1.302004280687372E-02, -2.999472923565940E-02, -3.500168301172267E-02,  6.652094060209728E-04,  7.364965859796964E-02,  9.502762780005353E-04,
        -1.379078709524768E-02, -3.134977787637801E-02, -3.484670502864788E-02, -2.083410666205811E-03,  7.846767002980860E-02,  3.251340455259131E-03,
         2.799598679805795E-03, -7.713911390087316E-02, -6.840142879710107E-02,  2.899252455249946E-04,  5.526010641184403E-02, -3.296271999130242E-03,
         8.096276777744580E-03, -7.368011913243314E-02, -5.432965066597394E-02, -1.042196760219270E-03,  5.322708746587942E-02, -6.039011268656808E-03,
         9.418280577447327E-03, -1.949142436127208E-02,  4.486925481160618E-02,  1.454414330918258E-05,  2.070766179871322E-02, -7.200882218333414E-04,
         7.995099154488386E-03, -1.997450490647943E-02,  4.571785645600748E-02, -1.461894224572280E-03,  2.062417534743544E-02, -4.287310248250484E-03);

    // error tolerance
    SDPair nod_tol, ele_tol;
    nod_tol.Set("ux uy uz",              1.0e-9, 1.0e-9, 1.0e-8);
    ele_tol.Set("sx sy sz  sxy syz szx", 1.0e-8, 1.0e-7, 1.0e-7, 1.0e-8, 1.0e-7, 1.0e-7);

    // return error flag
    bool err_nods = dom.CheckErrorNods (nod_sol, nod_tol);
    bool err_eles = dom.CheckErrorIPs  (ele_sol, ele_tol);
    return (err_nods || err_eles);
}
MECHSYS_CATCH
