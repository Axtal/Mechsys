########################################################################
# MechSys - Open Library for Mechanical Systems                        #
# Copyright (C) 2005 Dorival M. Pedroso, Ra√∫l D. D. Farfan             #
#                                                                      #
# This program is free software: you can redistribute it and/or modify #
# it under the terms of the GNU General Public License as published by #
# the Free Software Foundation, either version 3 of the License, or    #
# any later version.                                                   #
#                                                                      #
# This program is distributed in the hope that it will be useful,      #
# but WITHOUT ANY WARRANTY; without even the implied warranty of       #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the         #
# GNU General Public License for more details.                         #
#                                                                      #
# You should have received a copy of the GNU General Public License    #
# along with this program. If not, see <http://www.gnu.org/licenses/>  #
########################################################################

INCLUDE(FindThreads)
INCLUDE(${MECHSYS_SOURCE_DIR}/Modules/FindUseBLITZ.cmake)
INCLUDE(${MECHSYS_SOURCE_DIR}/Modules/FindGOTOBLAS.cmake)
INCLUDE(${MECHSYS_SOURCE_DIR}/Modules/FindUMFPACK.cmake)
INCLUDE(${MECHSYS_SOURCE_DIR}/Modules/FindSUPERLU.cmake)
INCLUDE(${MECHSYS_SOURCE_DIR}/Modules/FindSUPERLUD.cmake)
INCLUDE(${MECHSYS_SOURCE_DIR}/Modules/FindMPICXX.cmake)

ENABLE_LANGUAGE(Fortran)
INCLUDE(FindLAPACK)

SET(SERIAL_LIBS    "")
SET(SERIAL_FLAGS   "-DDO_DEBUG")
SET(PARALLEL_LIBS  "")
SET(PARALLEL_FLAGS "-DDO_DEBUG")

IF(UMFPACK_FOUND)
	INCLUDE_DIRECTORIES(${UMFPACK_INCLUDE_DIRS})
	SET(SERIAL_LIBS  ${SERIAL_LIBS} ${UMFPACK_LIBRARIES})
	SET(SERIAL_FLAGS "${SERIAL_FLAGS} -DHAVE_UMFPACK")
ENDIF(UMFPACK_FOUND)

IF(SUPERLU_FOUND)
	INCLUDE_DIRECTORIES(${SUPERLU_INCLUDE_DIRS})
	SET(SERIAL_LIBS  ${SERIAL_LIBS} ${SUPERLU_LIBRARIES})
	SET(SERIAL_FLAGS "${SERIAL_FLAGS} -DHAVE_SUPERLU")
ENDIF(SUPERLU_FOUND)

IF(SUPERLUD_FOUND)
	INCLUDE_DIRECTORIES(${SUPERLUD_INCLUDE_DIRS})
	SET(PARALLEL_LIBS  ${PARALLEL_LIBS} ${SUPERLUD_LIBRARIES})
	SET(PARALLEL_FLAGS "${PARALLEL_FLAGS} -DHAVE_SUPERLUD")
ENDIF(SUPERLUD_FOUND)

# SERIAL + LAPACK
IF(BLITZ_FOUND AND LAPACK_FOUND)
	ADD_EXECUTABLE        (ttruss01   ttruss01.cpp)
	TARGET_LINK_LIBRARIES (ttruss01   ${SERIAL_LIBS} ${LAPACK_LIBRARIES})
	SET_TARGET_PROPERTIES (ttruss01   PROPERTIES COMPILE_FLAGS "${SERIAL_FLAGS}")
	ADD_EXECUTABLE        (ttri6      ttri6.cpp)
	TARGET_LINK_LIBRARIES (ttri6      ${SERIAL_LIBS} ${LAPACK_LIBRARIES})
	SET_TARGET_PROPERTIES (ttri6      PROPERTIES COMPILE_FLAGS "${SERIAL_FLAGS}")
	ADD_EXECUTABLE        (tquad4     tquad4.cpp)
	TARGET_LINK_LIBRARIES (tquad4     ${SERIAL_LIBS} ${LAPACK_LIBRARIES})
	SET_TARGET_PROPERTIES (tquad4     PROPERTIES COMPILE_FLAGS "${SERIAL_FLAGS}")
	ADD_EXECUTABLE        (tquad8     tquad8.cpp)
	TARGET_LINK_LIBRARIES (tquad8     ${SERIAL_LIBS} ${LAPACK_LIBRARIES})
	SET_TARGET_PROPERTIES (tquad8     PROPERTIES COMPILE_FLAGS "${SERIAL_FLAGS}")
	ADD_EXECUTABLE        (tpstrain01 tpstrain01.cpp)
	TARGET_LINK_LIBRARIES (tpstrain01 ${SERIAL_LIBS} ${LAPACK_LIBRARIES})
	SET_TARGET_PROPERTIES (tpstrain01 PROPERTIES COMPILE_FLAGS "${SERIAL_FLAGS}")
	ADD_EXECUTABLE        (tsolid01   tsolid01.cpp)
	TARGET_LINK_LIBRARIES (tsolid01   ${SERIAL_LIBS} ${LAPACK_LIBRARIES})
	SET_TARGET_PROPERTIES (tsolid01   PROPERTIES COMPILE_FLAGS "${SERIAL_FLAGS}")
	ADD_EXECUTABLE        (theat theat.cpp)
	TARGET_LINK_LIBRARIES (theat ${SERIAL_LIBS} ${LAPACK_LIBRARIES})
	SET_TARGET_PROPERTIES (theat PROPERTIES COMPILE_FLAGS "${SERIAL_FLAGS}")
	ADD_EXECUTABLE        (tmesh01    tmesh01.cpp)
	TARGET_LINK_LIBRARIES (tmesh01    ${SERIAL_LIBS} ${LAPACK_LIBRARIES})
	SET_TARGET_PROPERTIES (tmesh01    PROPERTIES COMPILE_FLAGS "${SERIAL_FLAGS}")
	ADD_EXECUTABLE        (tmesh02    tmesh02.cpp)
	TARGET_LINK_LIBRARIES (tmesh02    ${SERIAL_LIBS} ${LAPACK_LIBRARIES})
	SET_TARGET_PROPERTIES (tmesh02    PROPERTIES COMPILE_FLAGS "${SERIAL_FLAGS}")
	#ADD_EXECUTABLE        (tplate01 tplate01.cpp)
	#TARGET_LINK_LIBRARIES (tplate01 ${SERIAL_LIBS} ${LAPACK_LIBRARIES})
	#SET_TARGET_PROPERTIES (tplate01 PROPERTIES COMPILE_FLAGS "${SERIAL_FLAGS}")
	#ADD_EXECUTABLE        (ttube01  ttube01.cpp)
	#TARGET_LINK_LIBRARIES (ttube01  ${SERIAL_LIBS} ${LAPACK_LIBRARIES})
	#SET_TARGET_PROPERTIES (ttube01  PROPERTIES COMPILE_FLAGS "${SERIAL_FLAGS}")
	#ADD_EXECUTABLE        (tshell01 tshell01.cpp)
	#TARGET_LINK_LIBRARIES (tshell01 ${SERIAL_LIBS} ${LAPACK_LIBRARIES})
	#SET_TARGET_PROPERTIES (tshell01 PROPERTIES COMPILE_FLAGS "${SERIAL_FLAGS}")
ENDIF(BLITZ_FOUND AND LAPACK_FOUND)

# SERIAL + GOTOBLAS
IF(CMAKE_THREAD_LIBS_INIT AND BLITZ_FOUND AND GOTOBLAS_FOUND)
	ADD_EXECUTABLE        (ttruss01_GO ttruss01.cpp)
	TARGET_LINK_LIBRARIES (ttruss01_GO ${SERIAL_LIBS} ${GOTOBLAS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
	SET_TARGET_PROPERTIES (ttruss01_GO PROPERTIES COMPILE_FLAGS "${SERIAL_FLAGS}")
	ADD_EXECUTABLE        (ttruss03_GO ttruss03.cpp)
	TARGET_LINK_LIBRARIES (ttruss03_GO ${SERIAL_LIBS} ${GOTOBLAS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
	SET_TARGET_PROPERTIES (ttruss03_GO PROPERTIES COMPILE_FLAGS "${SERIAL_FLAGS}")
	ADD_EXECUTABLE        (tsolid01_GO tsolid01.cpp)
	TARGET_LINK_LIBRARIES (tsolid01_GO ${SERIAL_LIBS} ${GOTOBLAS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
	SET_TARGET_PROPERTIES (tsolid01_GO PROPERTIES COMPILE_FLAGS "${SERIAL_FLAGS}")
ENDIF(CMAKE_THREAD_LIBS_INIT AND BLITZ_FOUND AND GOTOBLAS_FOUND)

# PARALLEL + LAPACK
IF(BLITZ_FOUND AND LAPACK_FOUND AND MPICXX_FOUND)
	#SET(CMAKE_CXX_COMPILER ${MPICXX})
	#ADD_EXECUTABLE        (ttruss02 ttruss02.cpp)
	#TARGET_LINK_LIBRARIES (ttruss02 ${PARALLEL_LIBS} ${LAPACK_LIBRARIES})
	#SET_TARGET_PROPERTIES (ttruss02 PROPERTIES COMPILE_FLAGS "${PARALLEL_FLAGS}")
ENDIF(BLITZ_FOUND AND LAPACK_FOUND AND MPICXX_FOUND)

# PARALLEL + GOTOBLAS
IF(CMAKE_THREAD_LIBS_INIT AND BLITZ_FOUND AND GOTOBLAS_FOUND AND MPICXX_FOUND)
	#SET(CMAKE_CXX_COMPILER ${MPICXX})
	#ADD_EXECUTABLE        (ttruss02_GO ttruss02.cpp)
	#ADD_EXECUTABLE        (ttruss04_GO ttruss04.cpp)
	#TARGET_LINK_LIBRARIES (ttruss02_GO ${PARALLEL_LIBS} ${GOTOBLAS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
	#TARGET_LINK_LIBRARIES (ttruss04_GO ${UMFPACK_LIBRARIES} ${PARALLEL_LIBS} ${GOTOBLAS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
	#SET_TARGET_PROPERTIES (ttruss02_GO PROPERTIES COMPILE_FLAGS "${PARALLEL_FLAGS}")
	#SET_TARGET_PROPERTIES (ttruss04_GO PROPERTIES COMPILE_FLAGS "${PARALLEL_FLAGS}")
ENDIF(CMAKE_THREAD_LIBS_INIT AND BLITZ_FOUND AND GOTOBLAS_FOUND AND MPICXX_FOUND)
